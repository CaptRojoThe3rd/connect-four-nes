;
; File generated by cc65 v 2.19 - Git 5493c9e
;
	.fopt		compiler,"cc65 v 2.19 - Git 5493c9e"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_pad_poll
	.import		_rand8
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_write
	.import		_memcpy
	.import		_memfill
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_get_pad_new
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_get_at_addr
	.import		_seed_rng
	.import		_reset_game
	.export		_pad_1
	.export		_pad_2
	.export		_selected_option
	.export		_gamemode
	.export		_piece_pos
	.export		_piece_pos_offset_plus
	.export		_piece_pos_offset_minus
	.export		_turn
	.export		_i
	.export		_j
	.export		_k
	.export		_l
	.export		_m
	.export		_a
	.export		_win_check_data
	.export		_win_positions
	.export		_board
	.export		_board_computer_move_check
	.export		_board_player_move_check
	.export		_test_computer_move
	.export		_test_player_move
	.export		_computer_move_scores
	.export		_computer_move_found
	.export		_title_pal
	.export		_bg_pal_game
	.export		_spr_pal_game
	.export		_player_vs_player_text
	.export		_player_vs_computer_text
	.export		_player_1s_turn_text
	.export		_player_2s_turn_text
	.export		_computers_turn_text
	.export		_player_1_wins_text
	.export		_player_2_wins_text
	.export		_computer_wins_text
	.export		_board_positions_x
	.export		_board_positions_y
	.export		_board_index_positions
	.export		_board_index_values
	.export		_piece_animation_values
	.export		_row_of_slots_upper
	.export		_row_of_slots_lower
	.export		_ROL
	.export		_find_board_pos
	.export		_check_for_win
	.export		_animate_piece_falling
	.export		_draw_board_tile
	.export		_wait_for_input
	.export		_get_computer_move
	.export		_game
	.export		_main

.segment	"RODATA"

_title_pal:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$0A
	.byte	$1A
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
_bg_pal_game:
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$30
	.byte	$1C
	.byte	$02
	.byte	$11
	.byte	$30
	.byte	$1C
	.byte	$06
	.byte	$16
	.byte	$30
	.byte	$1C
	.byte	$1C
	.byte	$0F
	.byte	$30
_spr_pal_game:
	.byte	$1C
	.byte	$02
	.byte	$11
	.byte	$12
	.byte	$1C
	.byte	$06
	.byte	$16
	.byte	$05
	.byte	$1C
	.byte	$17
	.byte	$27
	.byte	$37
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$30
_player_vs_player_text:
	.byte	$0A
	.byte	$06
	.byte	$01
	.byte	$11
	.byte	$03
	.byte	$0B
	.byte	$00
	.byte	$0F
	.byte	$0C
	.byte	$12
	.byte	$00
	.byte	$0A
	.byte	$06
	.byte	$01
	.byte	$11
	.byte	$03
	.byte	$0B
_player_vs_computer_text:
	.byte	$0A
	.byte	$06
	.byte	$01
	.byte	$11
	.byte	$03
	.byte	$0B
	.byte	$00
	.byte	$0F
	.byte	$0C
	.byte	$12
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$07
	.byte	$0A
	.byte	$0E
	.byte	$0D
	.byte	$03
	.byte	$0B
_player_1s_turn_text:
	.byte	$0A
	.byte	$06
	.byte	$01
	.byte	$11
	.byte	$03
	.byte	$0B
	.byte	$00
	.byte	$15
	.byte	$13
	.byte	$0C
_player_2s_turn_text:
	.byte	$0A
	.byte	$06
	.byte	$01
	.byte	$11
	.byte	$03
	.byte	$0B
	.byte	$00
	.byte	$16
	.byte	$13
	.byte	$0C
_computers_turn_text:
	.byte	$02
	.byte	$09
	.byte	$07
	.byte	$0A
	.byte	$0E
	.byte	$0D
	.byte	$03
	.byte	$0B
	.byte	$13
	.byte	$0C
_player_1_wins_text:
	.byte	$0A
	.byte	$06
	.byte	$01
	.byte	$11
	.byte	$03
	.byte	$0B
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$0C
	.byte	$14
_player_2_wins_text:
	.byte	$0A
	.byte	$06
	.byte	$01
	.byte	$11
	.byte	$03
	.byte	$0B
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$0C
	.byte	$14
_computer_wins_text:
	.byte	$02
	.byte	$09
	.byte	$07
	.byte	$0A
	.byte	$0E
	.byte	$0D
	.byte	$03
	.byte	$0B
	.byte	$00
	.byte	$10
	.byte	$05
	.byte	$08
	.byte	$0C
	.byte	$14
_board_positions_x:
	.byte	$40
	.byte	$50
	.byte	$60
	.byte	$70
	.byte	$80
	.byte	$90
	.byte	$A0
	.byte	$40
	.byte	$50
	.byte	$60
	.byte	$70
	.byte	$80
	.byte	$90
	.byte	$A0
	.byte	$40
	.byte	$50
	.byte	$60
	.byte	$70
	.byte	$80
	.byte	$90
	.byte	$A0
	.byte	$40
	.byte	$50
	.byte	$60
	.byte	$70
	.byte	$80
	.byte	$90
	.byte	$A0
	.byte	$40
	.byte	$50
	.byte	$60
	.byte	$70
	.byte	$80
	.byte	$90
	.byte	$A0
	.byte	$40
	.byte	$50
	.byte	$60
	.byte	$70
	.byte	$80
	.byte	$90
	.byte	$A0
_board_positions_y:
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$60
	.byte	$70
	.byte	$70
	.byte	$70
	.byte	$70
	.byte	$70
	.byte	$70
	.byte	$70
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$80
	.byte	$90
	.byte	$90
	.byte	$90
	.byte	$90
	.byte	$90
	.byte	$90
	.byte	$90
_board_index_positions:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$06
	.byte	$0E
	.byte	$0E
	.byte	$10
	.byte	$10
	.byte	$12
	.byte	$12
	.byte	$14
	.byte	$0E
	.byte	$0E
	.byte	$10
	.byte	$10
	.byte	$12
	.byte	$12
	.byte	$14
	.byte	$1C
	.byte	$1C
	.byte	$1E
	.byte	$1E
	.byte	$20
	.byte	$20
	.byte	$22
	.byte	$1C
	.byte	$1C
	.byte	$1E
	.byte	$1E
	.byte	$20
	.byte	$20
	.byte	$22
_board_index_values:
	.byte	$00
	.byte	$2A
	.byte	$54
_piece_animation_values:
	.byte	$30
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$30
_row_of_slots_upper:
	.byte	$17
	.byte	$18
	.byte	$17
	.byte	$18
	.byte	$17
	.byte	$18
	.byte	$17
	.byte	$18
	.byte	$17
	.byte	$18
	.byte	$17
	.byte	$18
	.byte	$17
	.byte	$18
_row_of_slots_lower:
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A
	.byte	$19
	.byte	$1A

.segment	"BSS"

.segment	"ZEROPAGE"
_pad_1:
	.res	1,$00
_pad_2:
	.res	1,$00
_selected_option:
	.res	1,$00
_gamemode:
	.res	1,$00
_piece_pos:
	.res	1,$00
_piece_pos_offset_plus:
	.res	1,$00
_piece_pos_offset_minus:
	.res	1,$00
_turn:
	.res	1,$00
_i:
	.res	1,$00
_j:
	.res	1,$00
_k:
	.res	1,$00
_l:
	.res	1,$00
_m:
	.res	1,$00
_a:
	.res	2,$00
_win_check_data:
	.res	4,$00
_win_positions:
	.res	4,$00
_board:
	.res	42,$00
_board_computer_move_check:
	.res	42,$00
_board_player_move_check:
	.res	42,$00
_test_computer_move:
	.res	1,$00
_test_player_move:
	.res	1,$00
_computer_move_scores:
	.res	7,$00
_computer_move_found:
	.res	1,$00

; ---------------------------------------------------------------
; unsigned char __near__ ROL (unsigned char n, unsigned char e)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ROL: near

.segment	"CODE"

;
; unsigned char ROL(unsigned char n, unsigned char e) { // thanks geeksforgeeks
;
	jsr     pusha
;
; return (n >> e)|(n << (8 - e));
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	sta     ptr1
	lda     (sp,x)
	tay
	lda     ptr1
L0002:	lsr     a
	dey
	bpl     L0002
	rol     a
	sta     sreg
	stx     sreg+1
	ldx     #$00
	ldy     #$01
	lda     (sp),y
	sta     ptr1
	lda     #$08
	sec
	dey
	sbc     (sp),y
	tay
	lda     ptr1
	jsr     aslaxy
	ora     sreg
	pha
	txa
	ora     sreg+1
	pla
	ldx     #$00
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ find_board_pos (unsigned char board_id)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_find_board_pos: near

.segment	"CODE"

;
; unsigned char find_board_pos(unsigned char board_id) {
;
	jsr     pusha
;
; board_id = board_index_values[board_id];
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     _board_index_values,y
	ldy     #$00
	sta     (sp),y
;
; for (i = 36; i > 0; i -= 7) {
;
	lda     #$24
L000F:	sta     _i
	ldx     #$00
	lda     _i
	beq     L0004
;
; if (board[piece_pos + board_id] != 0) {
;
	lda     (sp,x)
	clc
	adc     _piece_pos
	bcc     L000D
	inx
L000D:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	ldx     #$00
	lda     (ptr1),y
	beq     L0010
;
; return 255;
;
	lda     #$FF
	jmp     incsp1
;
; if (board[piece_pos + i - 1 + board_id] == 0) {
;
L0010:	lda     _piece_pos
	clc
	adc     _i
	bcc     L000B
	inx
L000B:	sec
	sbc     #$01
	bcs     L0009
	dex
L0009:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L000E
	inx
L000E:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	bne     L0011
;
; return piece_pos + i - 1;
;
	lda     _piece_pos
	clc
	adc     _i
	sec
	sbc     #$01
	ldx     #$00
	jmp     incsp1
;
; for (i = 36; i > 0; i -= 7) {
;
L0011:	lda     _i
	sec
	sbc     #$07
	jmp     L000F
;
; }
;
L0004:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ check_for_win (unsigned char board_id, unsigned char piece)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_for_win: near

.segment	"CODE"

;
; unsigned char check_for_win(unsigned char board_id, unsigned char piece) {
;
	jsr     pusha
;
; board_id = board_index_values[board_id];
;
	ldy     #$01
	lda     (sp),y
	tay
	lda     _board_index_values,y
	ldy     #$01
	sta     (sp),y
;
; for (j = 0; j < 4; ++j) {
;
	lda     #$00
	sta     _j
L0075:	lda     _j
	cmp     #$04
	jcs     L007B
;
; for (k = 0; k < 6; ++k) {
;
	lda     #$00
	sta     _k
L0076:	lda     _k
	cmp     #$06
	jcs     L007A
;
; win_check_data[0] = board[j + k * 7 + board_id];
;
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     _j
	bcc     L0057
	inx
L0057:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0058
	inx
L0058:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data
;
; win_check_data[1] = board[j + 1 + k * 7 + board_id];
;
	ldx     #$00
	lda     _j
	clc
	adc     #$01
	bcc     L000B
	inx
L000B:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0059
	inx
L0059:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+1
;
; win_check_data[2] = board[j + 2 + k * 7 + board_id];
;
	ldx     #$00
	lda     _j
	clc
	adc     #$02
	bcc     L000C
	inx
L000C:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L005A
	inx
L005A:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+2
;
; win_check_data[3] = board[j + 3 + k * 7 + board_id];
;
	ldx     #$00
	lda     _j
	clc
	adc     #$03
	bcc     L000D
	inx
L000D:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L005B
	inx
L005B:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+3
;
; if (win_check_data[0] == piece && win_check_data[1] == piece && win_check_data[2] == piece && win_check_data[3] == piece) {
;
	lda     _win_check_data
	ldy     #$00
	cmp     (sp),y
	jne     L0079
	lda     _win_check_data+1
	cmp     (sp),y
	jne     L0079
	lda     _win_check_data+2
	cmp     (sp),y
	bne     L0079
	lda     _win_check_data+3
	cmp     (sp),y
	bne     L0079
;
; win_positions[0] = j + k * 7;
;
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     _j
	sta     _win_positions
;
; win_positions[1] = j + 1 + k * 7;
;
	ldx     #$00
	lda     _j
	clc
	adc     #$01
	bcc     L0012
	inx
L0012:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     sreg
	sta     _win_positions+1
	txa
	adc     sreg+1
;
; win_positions[2] = j + 2 + k * 7;
;
	ldx     #$00
	lda     _j
	clc
	adc     #$02
	bcc     L0013
	inx
L0013:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     sreg
	sta     _win_positions+2
	txa
	adc     sreg+1
;
; win_positions[3] = j + 3 + k * 7;
;
	ldx     #$00
	lda     _j
	clc
	adc     #$03
	bcc     L0014
	inx
L0014:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     sreg
	sta     _win_positions+3
	txa
	adc     sreg+1
;
; return 1;
;
	ldx     #$00
	lda     #$01
	jmp     incsp2
;
; for (k = 0; k < 6; ++k) {
;
L0079:	inc     _k
	jmp     L0076
;
; for (j = 0; j < 4; ++j) {
;
L007A:	inc     _j
	jmp     L0075
;
; for (j = 0; j < 7; ++j) {
;
L007B:	lda     #$00
	sta     _j
L007C:	lda     _j
	cmp     #$07
	jcs     L0082
;
; for (k = 0; k < 3; ++k) {
;
	lda     #$00
	sta     _k
L007D:	lda     _k
	cmp     #$03
	jcs     L0081
;
; win_check_data[0] = board[j + k * 7 + board_id];
;
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     _j
	bcc     L005D
	inx
L005D:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L005E
	inx
L005E:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data
;
; win_check_data[1] = board[j + (k + 1) * 7 + board_id];
;
	ldx     #$00
	lda     _k
	clc
	adc     #$01
	bcc     L001D
	inx
L001D:	jsr     mulax7
	clc
	adc     _j
	bcc     L005F
	inx
L005F:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0060
	inx
L0060:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+1
;
; win_check_data[2] = board[j + (k + 2) * 7 + board_id];
;
	ldx     #$00
	lda     _k
	clc
	adc     #$02
	bcc     L001E
	inx
L001E:	jsr     mulax7
	clc
	adc     _j
	bcc     L0061
	inx
L0061:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0062
	inx
L0062:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+2
;
; win_check_data[3] = board[j + (k + 3) * 7 + board_id];
;
	ldx     #$00
	lda     _k
	clc
	adc     #$03
	bcc     L001F
	inx
L001F:	jsr     mulax7
	clc
	adc     _j
	bcc     L0063
	inx
L0063:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0064
	inx
L0064:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+3
;
; if (win_check_data[0] == piece && win_check_data[1] == piece && win_check_data[2] == piece && win_check_data[3] == piece) {
;
	lda     _win_check_data
	ldy     #$00
	cmp     (sp),y
	bne     L0080
	lda     _win_check_data+1
	cmp     (sp),y
	bne     L0080
	lda     _win_check_data+2
	cmp     (sp),y
	bne     L0080
	lda     _win_check_data+3
	cmp     (sp),y
	bne     L0080
;
; win_positions[0] = j + k * 7;
;
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     _j
	sta     _win_positions
;
; win_positions[1] = j + (k + 1) * 7;
;
	ldx     #$00
	lda     _k
	clc
	adc     #$01
	bcc     L0024
	inx
L0024:	jsr     mulax7
	clc
	adc     _j
	sta     _win_positions+1
;
; win_positions[2] = j + (k + 2) * 7;
;
	ldx     #$00
	lda     _k
	clc
	adc     #$02
	bcc     L0025
	inx
L0025:	jsr     mulax7
	clc
	adc     _j
	sta     _win_positions+2
;
; win_positions[3] = j + (k + 3) * 7;
;
	ldx     #$00
	lda     _k
	clc
	adc     #$03
	bcc     L0026
	inx
L0026:	jsr     mulax7
	clc
	adc     _j
	sta     _win_positions+3
;
; return 1;
;
	ldx     #$00
	lda     #$01
	jmp     incsp2
;
; for (k = 0; k < 3; ++k) {
;
L0080:	inc     _k
	jmp     L007D
;
; for (j = 0; j < 7; ++j) {
;
L0081:	inc     _j
	jmp     L007C
;
; for (j = 0; j < 4; ++j) {
;
L0082:	lda     #$00
	sta     _j
L0083:	lda     _j
	cmp     #$04
	jcs     L0089
;
; for (k = 3; k < 6; ++k) {
;
	lda     #$03
	sta     _k
L0084:	lda     _k
	cmp     #$06
	jcs     L0088
;
; win_check_data[0] = board[j + k * 7 + board_id];
;
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     _j
	bcc     L0069
	inx
L0069:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L006A
	inx
L006A:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data
;
; win_check_data[1] = board[j + 1 + (k - 1) * 7 + board_id];
;
	ldx     #$00
	lda     _j
	clc
	adc     #$01
	bcc     L002F
	inx
L002F:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	sec
	sbc     #$01
	bcs     L0030
	dex
L0030:	jsr     mulax7
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L006B
	inx
L006B:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+1
;
; win_check_data[2] = board[j + 2 + (k - 2) * 7 + board_id];
;
	ldx     #$00
	lda     _j
	clc
	adc     #$02
	bcc     L0031
	inx
L0031:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	sec
	sbc     #$02
	bcs     L0032
	dex
L0032:	jsr     mulax7
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L006C
	inx
L006C:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+2
;
; win_check_data[3] = board[j + 3 + (k - 3) * 7 + board_id];
;
	ldx     #$00
	lda     _j
	clc
	adc     #$03
	bcc     L0033
	inx
L0033:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	sec
	sbc     #$03
	bcs     L0034
	dex
L0034:	jsr     mulax7
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L006D
	inx
L006D:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+3
;
; if (win_check_data[0] == piece && win_check_data[1] == piece && win_check_data[2] == piece && win_check_data[3] == piece) {
;
	lda     _win_check_data
	ldy     #$00
	cmp     (sp),y
	jne     L0087
	lda     _win_check_data+1
	cmp     (sp),y
	jne     L0087
	lda     _win_check_data+2
	cmp     (sp),y
	jne     L0087
	lda     _win_check_data+3
	cmp     (sp),y
	jne     L0087
;
; win_positions[0] = j + k * 7;
;
	ldx     #$00
	lda     _k
	jsr     mulax7
	clc
	adc     _j
	sta     _win_positions
;
; win_positions[1] = j + 1 + (k - 1) * 7;
;
	ldx     #$00
	lda     _j
	clc
	adc     #$01
	bcc     L0039
	inx
L0039:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	sec
	sbc     #$01
	bcs     L003A
	dex
L003A:	jsr     mulax7
	clc
	adc     sreg
	sta     _win_positions+1
	txa
	adc     sreg+1
;
; win_positions[2] = j + 2 + (k - 2) * 7;
;
	ldx     #$00
	lda     _j
	clc
	adc     #$02
	bcc     L003B
	inx
L003B:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	sec
	sbc     #$02
	bcs     L003C
	dex
L003C:	jsr     mulax7
	clc
	adc     sreg
	sta     _win_positions+2
	txa
	adc     sreg+1
;
; win_positions[3] = j + 3 + (k - 3) * 7;
;
	ldx     #$00
	lda     _j
	clc
	adc     #$03
	bcc     L003D
	inx
L003D:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	sec
	sbc     #$03
	bcs     L003E
	dex
L003E:	jsr     mulax7
	clc
	adc     sreg
	sta     _win_positions+3
	txa
	adc     sreg+1
;
; return 1;
;
	ldx     #$00
	lda     #$01
	jmp     incsp2
;
; for (k = 3; k < 6; ++k) {
;
L0087:	inc     _k
	jmp     L0084
;
; for (j = 0; j < 4; ++j) {
;
L0088:	inc     _j
	jmp     L0083
;
; for (j = 0; j < 4; ++j) {
;
L0089:	lda     #$00
	sta     _j
	tax
L008A:	lda     _j
	cmp     #$04
	jcs     L0090
;
; for (k = 0; k < 3; ++k) {
;
	lda     #$00
	sta     _k
	tax
L008B:	lda     _k
	cmp     #$03
	jcs     L008F
;
; win_check_data[0] = board[j + k * 7 + board_id];
;
	jsr     mulax7
	clc
	adc     _j
	bcc     L006F
	inx
L006F:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0070
	inx
L0070:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data
;
; win_check_data[1] = board[j + 1 + (k + 1) * 7 + board_id];
;
	ldx     #$00
	lda     _j
	clc
	adc     #$01
	bcc     L0047
	inx
L0047:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	clc
	adc     #$01
	bcc     L0048
	inx
L0048:	jsr     mulax7
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0071
	inx
L0071:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+1
;
; win_check_data[2] = board[j + 2 + (k + 2) * 7 + board_id];
;
	ldx     #$00
	lda     _j
	clc
	adc     #$02
	bcc     L0049
	inx
L0049:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	clc
	adc     #$02
	bcc     L004A
	inx
L004A:	jsr     mulax7
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0072
	inx
L0072:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+2
;
; win_check_data[3] = board[j + 3 + (k + 3) * 7 + board_id];
;
	ldx     #$00
	lda     _j
	clc
	adc     #$03
	bcc     L004B
	inx
L004B:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	clc
	adc     #$03
	bcc     L004C
	inx
L004C:	jsr     mulax7
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0073
	inx
L0073:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	sta     _win_check_data+3
;
; if (win_check_data[0] == piece && win_check_data[1] == piece && win_check_data[2] == piece && win_check_data[3] == piece) {
;
	ldx     #$00
	lda     _win_check_data
	ldy     #$00
	cmp     (sp),y
	jne     L008E
	lda     _win_check_data+1
	cmp     (sp),y
	jne     L008E
	lda     _win_check_data+2
	cmp     (sp),y
	jne     L008E
	lda     _win_check_data+3
	cmp     (sp),y
	jne     L008E
;
; win_positions[0] = j + k * 7;
;
	lda     _k
	jsr     mulax7
	clc
	adc     _j
	sta     _win_positions
;
; win_positions[1] = j + 1 + (k + 1) * 7;
;
	ldx     #$00
	lda     _j
	clc
	adc     #$01
	bcc     L0051
	inx
L0051:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	clc
	adc     #$01
	bcc     L0052
	inx
L0052:	jsr     mulax7
	clc
	adc     sreg
	sta     _win_positions+1
	txa
	adc     sreg+1
;
; win_positions[2] = j + 2 + (k + 2) * 7;
;
	ldx     #$00
	lda     _j
	clc
	adc     #$02
	bcc     L0053
	inx
L0053:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	clc
	adc     #$02
	bcc     L0054
	inx
L0054:	jsr     mulax7
	clc
	adc     sreg
	sta     _win_positions+2
	txa
	adc     sreg+1
;
; win_positions[3] = j + 3 + (k + 3) * 7;
;
	ldx     #$00
	lda     _j
	clc
	adc     #$03
	bcc     L0055
	inx
L0055:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _k
	clc
	adc     #$03
	bcc     L0056
	inx
L0056:	jsr     mulax7
	clc
	adc     sreg
	sta     _win_positions+3
	txa
	adc     sreg+1
;
; return 1;
;
	ldx     #$00
	lda     #$01
	jmp     incsp2
;
; for (k = 0; k < 3; ++k) {
;
L008E:	inc     _k
	jmp     L008B
;
; for (j = 0; j < 4; ++j) {
;
L008F:	inc     _j
	jmp     L008A
;
; return 0;
;
L0090:	lda     #$00
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ animate_piece_falling (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_animate_piece_falling: near

.segment	"CODE"

;
; for (i = board_positions_y[piece_pos] - 16; i < board_positions_y[j]; ++i) {
;
	ldy     _piece_pos
	lda     _board_positions_y,y
	sec
	sbc     #$10
	sta     _i
L002B:	lda     _i
	ldy     _j
	cmp     _board_positions_y,y
	bcc     L002D
;
; }
;
	rts
;
; ppu_wait_nmi();
;
L002D:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_spr(64 + (piece_pos * 16), 63, 0x24, 0b00000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$3F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 63, 0x24, 0b01000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$3F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$43
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), 71, 0x24, 0b10000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$47
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$83
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 71, 0x24, 0b11000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$47
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$C3
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), 79, 0x24, 0b00000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$4F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 79, 0x24, 0b01000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$4F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$43
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), 87, 0x24, 0b10000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$57
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$83
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 87, 0x24, 0b11000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$57
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$C3
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), 95, 0x24, 0b00000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$5F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 95, 0x24, 0b01000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$5F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$43
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), 103, 0x24, 0b10000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$67
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$83
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 103, 0x24, 0b11000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$67
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$C3
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), 111, 0x24, 0b00000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$6F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 111, 0x24, 0b01000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$6F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$43
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), 119, 0x24, 0b10000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$77
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$83
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 119, 0x24, 0b11000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$77
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$C3
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), 127, 0x24, 0b00000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$7F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 127, 0x24, 0b01000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$7F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$43
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), 135, 0x24, 0b10000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$87
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$83
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 135, 0x24, 0b11000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$87
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$C3
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), 143, 0x24, 0b00000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$8F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 143, 0x24, 0b01000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$8F
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$43
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), 151, 0x24, 0b10000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     #$97
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$83
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), 151, 0x24, 0b11000011);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     #$97
	dey
	sta     (sp),y
	lda     #$24
	dey
	sta     (sp),y
	lda     #$C3
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), i, 0x21, 0b00000000 + turn);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     _i
	dey
	sta     (sp),y
	lda     #$21
	dey
	sta     (sp),y
	lda     _turn
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), i, 0x22, 0b01000000 + turn);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     _i
	dey
	sta     (sp),y
	lda     #$22
	dey
	sta     (sp),y
	lda     _turn
	clc
	adc     #$40
	jsr     _oam_spr
;
; oam_spr(64 + (piece_pos * 16), i + 8, 0x22, 0b10000000 + turn);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$40
	ldy     #$02
	sta     (sp),y
	lda     _i
	clc
	adc     #$08
	dey
	sta     (sp),y
	lda     #$22
	dey
	sta     (sp),y
	lda     _turn
	clc
	adc     #$80
	jsr     _oam_spr
;
; oam_spr(72 + (piece_pos * 16), i + 8, 0x22, 0b11000000 + turn);
;
	jsr     decsp3
	lda     _piece_pos
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$48
	ldy     #$02
	sta     (sp),y
	lda     _i
	clc
	adc     #$08
	dey
	sta     (sp),y
	lda     #$22
	dey
	sta     (sp),y
	lda     _turn
	clc
	adc     #$C0
	jsr     _oam_spr
;
; if (i & 0b10) {
;
	lda     _i
	and     #$02
	beq     L002C
;
; ++i;
;
	inc     _i
;
; for (i = board_positions_y[piece_pos] - 16; i < board_positions_y[j]; ++i) {
;
L002C:	inc     _i
	jmp     L002B

.endproc

; ---------------------------------------------------------------
; void __near__ draw_board_tile (unsigned char pos)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_board_tile: near

.segment	"CODE"

;
; void draw_board_tile(unsigned char pos) {
;
	jsr     pusha
;
; i = board_index_positions[pos];
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     _board_index_positions,y
	sta     _i
;
; l = 0;
;
	lda     #$00
	sta     _l
;
; l += board[i];
;
	ldy     _i
	lda     _board,y
	clc
	adc     _l
	sta     _l
;
; l = ROL(l, 2);
;
	jsr     pusha
	lda     #$02
	jsr     _ROL
	sta     _l
;
; l += board[i + 1];
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L0004
	inx
L0004:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	clc
	adc     _l
	sta     _l
;
; l = ROL(l, 2);
;
	jsr     pusha
	lda     #$02
	jsr     _ROL
	sta     _l
;
; l += board[i + 7];
;
	ldx     #$00
	lda     _i
	clc
	adc     #$07
	bcc     L0005
	inx
L0005:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	clc
	adc     _l
	sta     _l
;
; l = ROL(l, 2);
;
	jsr     pusha
	lda     #$02
	jsr     _ROL
	sta     _l
;
; l += board[i + 8];
;
	ldx     #$00
	lda     _i
	clc
	adc     #$08
	bcc     L0006
	inx
L0006:	sta     ptr1
	txa
	clc
	adc     #>(_board)
	sta     ptr1+1
	ldy     #<(_board)
	lda     (ptr1),y
	clc
	adc     _l
	sta     _l
;
; l = ROL(l, 2);
;
	jsr     pusha
	lda     #$02
	jsr     _ROL
	sta     _l
;
; one_vram_buffer(l, get_at_addr(0, board_positions_x[i], board_positions_y[i]));
;
	jsr     pusha
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _board_positions_x,y
	ldy     #$00
	sta     (sp),y
	ldy     _i
	lda     _board_positions_y,y
	jsr     _get_at_addr
	jsr     _one_vram_buffer
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ wait_for_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait_for_input: near

.segment	"CODE"

;
; j = 10;
;
	lda     #$0A
	sta     _j
;
; k = 0;
;
	lda     #$00
	sta     _k
;
; l = 4;
;
	lda     #$04
	sta     _l
;
; m = 0;
;
	lda     #$00
	sta     _m
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
;
; pad_1 = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad_1
;
; for (i = 0; i < 4; ++i) {
;
	lda     #$00
	sta     _i
L0022:	lda     _i
	cmp     #$04
	jcs     L0023
;
; oam_spr(board_positions_x[win_positions[i]], board_positions_y[win_positions[i]] - 1, 0x23 + l, 0b00000010);
;
	jsr     decsp3
	ldy     _i
	lda     _win_positions,y
	sta     ptr1
	clc
	lda     #>(_board_positions_x)
	sta     ptr1+1
	ldy     #<(_board_positions_x)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _win_positions,y
	sta     ptr1
	clc
	lda     #>(_board_positions_y)
	sta     ptr1+1
	ldy     #<(_board_positions_y)
	lda     (ptr1),y
	sec
	sbc     #$01
	ldy     #$01
	sta     (sp),y
	lda     _l
	clc
	adc     #$23
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(board_positions_x[win_positions[i]] + 8, board_positions_y[win_positions[i]] - 1, 0x23 + l, 0b01000010);
;
	jsr     decsp3
	ldy     _i
	lda     _win_positions,y
	sta     ptr1
	clc
	lda     #>(_board_positions_x)
	sta     ptr1+1
	ldy     #<(_board_positions_x)
	lda     (ptr1),y
	clc
	adc     #$08
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _win_positions,y
	sta     ptr1
	clc
	lda     #>(_board_positions_y)
	sta     ptr1+1
	ldy     #<(_board_positions_y)
	lda     (ptr1),y
	sec
	sbc     #$01
	ldy     #$01
	sta     (sp),y
	lda     _l
	clc
	adc     #$23
	dey
	sta     (sp),y
	lda     #$42
	jsr     _oam_spr
;
; oam_spr(board_positions_x[win_positions[i]], board_positions_y[win_positions[i]] + 7, 0x23 + l, 0b10000010);
;
	jsr     decsp3
	ldy     _i
	lda     _win_positions,y
	sta     ptr1
	clc
	lda     #>(_board_positions_x)
	sta     ptr1+1
	ldy     #<(_board_positions_x)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _win_positions,y
	sta     ptr1
	clc
	lda     #>(_board_positions_y)
	sta     ptr1+1
	ldy     #<(_board_positions_y)
	lda     (ptr1),y
	clc
	adc     #$07
	ldy     #$01
	sta     (sp),y
	lda     _l
	clc
	adc     #$23
	dey
	sta     (sp),y
	lda     #$82
	jsr     _oam_spr
;
; oam_spr(board_positions_x[win_positions[i]] + 8, board_positions_y[win_positions[i]] + 7, 0x23 + l, 0b11000010);
;
	jsr     decsp3
	ldy     _i
	lda     _win_positions,y
	sta     ptr1
	clc
	lda     #>(_board_positions_x)
	sta     ptr1+1
	ldy     #<(_board_positions_x)
	lda     (ptr1),y
	clc
	adc     #$08
	ldy     #$02
	sta     (sp),y
	ldy     _i
	lda     _win_positions,y
	sta     ptr1
	clc
	lda     #>(_board_positions_y)
	sta     ptr1+1
	ldy     #<(_board_positions_y)
	lda     (ptr1),y
	clc
	adc     #$07
	ldy     #$01
	sta     (sp),y
	lda     _l
	clc
	adc     #$23
	dey
	sta     (sp),y
	lda     #$C2
	jsr     _oam_spr
;
; for (i = 0; i < 4; ++i) {
;
	inc     _i
	jmp     L0022
;
; ++k;
;
L0023:	inc     _k
;
; if (k == 6) {
;
	lda     _k
	cmp     #$06
	bne     L001B
;
; if (m) {
;
	lda     _m
	beq     L0024
;
; --l;
;
	dec     _l
;
; if (!l) { --m; }
;
	lda     _l
	bne     L0025
	dec     _m
;
; } else {
;
	jmp     L0026
;
; ++l;
;
L0024:	inc     _l
;
; if (l == 5) { ++m; }
;
	lda     _l
	cmp     #$05
	bne     L0025
	inc     _m
;
; k = 0;
;
L0025:	lda     #$00
L0026:	sta     _k
;
; if (pad_1) {
;
L001B:	lda     _pad_1
	jeq     L0002
;
; reset_game();
;
	jsr     _reset_game
;
; while (1) {
;
	jmp     L0002

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_computer_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_computer_move: near

.segment	"CODE"

;
; memfill(computer_move_scores, 0, 7);
;
	jsr     decsp3
	lda     #<(_computer_move_scores)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_computer_move_scores)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$07
	jsr     _memfill
;
; for (test_computer_move = 0; test_computer_move < 7; ++test_computer_move) {
;
	lda     #$00
	sta     _test_computer_move
L002A:	lda     _test_computer_move
	cmp     #$07
	jcs     L0030
;
; memcpy(board_computer_move_check, board, 42);
;
	ldy     #$29
L0006:	lda     _board,y
	sta     _board_computer_move_check,y
	dey
	bpl     L0006
;
; piece_pos = test_computer_move;
;
	lda     _test_computer_move
	sta     _piece_pos
;
; i = find_board_pos(1);
;
	lda     #$01
	jsr     _find_board_pos
	sta     _i
;
; if (i != 255) {
;
	cmp     #$FF
	beq     L002F
;
; board_computer_move_check[i] = 2;
;
	ldy     _i
	lda     #$02
	sta     _board_computer_move_check,y
;
; if (check_for_win(1, 2)) {
;
	lda     #$01
	jsr     pusha
	lda     #$02
	jsr     _check_for_win
	tax
	beq     L002C
;
; return test_computer_move;
;
	ldx     #$00
	lda     _test_computer_move
	rts
;
; for (test_player_move = 0; test_player_move < 7; ++test_player_move) {
;
L002C:	sta     _test_player_move
L002D:	lda     _test_player_move
	cmp     #$07
	bcs     L002F
;
; memcpy(board_player_move_check, board_computer_move_check, 42);
;
	ldy     #$29
L000F:	lda     _board_computer_move_check,y
	sta     _board_player_move_check,y
	dey
	bpl     L000F
;
; piece_pos = test_player_move;
;
	lda     _test_player_move
	sta     _piece_pos
;
; i = find_board_pos(2);
;
	lda     #$02
	jsr     _find_board_pos
	sta     _i
;
; if (i != 255) {
;
	cmp     #$FF
	beq     L002E
;
; board_player_move_check[i] = 1;
;
	ldy     _i
	lda     #$01
	sta     _board_player_move_check,y
;
; if (check_for_win(2, 1)) {
;
	lda     #$02
	jsr     pusha
	lda     #$01
	jsr     _check_for_win
	tax
	beq     L0012
;
; computer_move_scores[test_computer_move] = 1;
;
	ldy     _test_computer_move
	lda     #$01
	sta     _computer_move_scores,y
;
; break;
;
	jmp     L002F
;
; computer_move_scores[test_computer_move] = 2;
;
L0012:	ldy     _test_computer_move
	lda     #$02
	sta     _computer_move_scores,y
;
; for (test_player_move = 0; test_player_move < 7; ++test_player_move) {
;
L002E:	inc     _test_player_move
	jmp     L002D
;
; for (test_computer_move = 0; test_computer_move < 7; ++test_computer_move) {
;
L002F:	inc     _test_computer_move
	jmp     L002A
;
; j = computer_move_scores[0];
;
L0030:	lda     _computer_move_scores
	sta     _j
;
; for (i = 1; i < 7; ++i) {
;
	lda     #$01
	sta     _i
L0031:	lda     _i
	cmp     #$07
	bcs     L0032
;
; if (j != computer_move_scores[i]) {
;
	lda     _j
	ldy     _i
	cmp     _computer_move_scores,y
;
; break;
;
	bne     L0032
;
; for (i = 1; i < 7; ++i) {
;
	inc     _i
	jmp     L0031
;
; if (i == 7) {
;
L0032:	lda     _i
	cmp     #$07
	bne     L0034
;
; piece_pos = rand8() & 0b111;
;
L001D:	jsr     _rand8
	and     #$07
	sta     _piece_pos
;
; if (piece_pos == 7) {
;
	cmp     #$07
	bne     L0033
;
; --piece_pos;
;
	dec     _piece_pos
;
; if (find_board_pos(0) != 255) {
;
L0033:	lda     #$00
	jsr     _find_board_pos
	cmp     #$FF
	beq     L001D
;
; j = piece_pos;
;
	ldx     #$00
	lda     _piece_pos
	sta     _j
;
; break;
;
	jmp     L0037
;
; for (i = 0; i < 7; ++i) {
;
L0034:	lda     #$00
	sta     _i
	tax
L0035:	lda     _i
	cmp     #$07
	bcs     L0037
;
; if (computer_move_scores[j] < computer_move_scores[i]) {
;
	ldy     _j
	lda     _computer_move_scores,y
	ldy     _i
	cmp     _computer_move_scores,y
	bcs     L0036
;
; j = i;
;
	lda     _i
	sta     _j
;
; for (i = 0; i < 7; ++i) {
;
L0036:	inc     _i
	jmp     L0035
;
; return j;
;
L0037:	lda     _j
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(bg_pal_game);
;
	lda     #<(_bg_pal_game)
	ldx     #>(_bg_pal_game)
	jsr     _pal_bg
;
; pal_spr(spr_pal_game);
;
	lda     #<(_spr_pal_game)
	ldx     #>(_spr_pal_game)
	jsr     _pal_spr
;
; vram_adr(NTADR_A(0, 0));
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (a = 0; a < 960; ++a) {
;
	lda     #$00
	sta     _a
	sta     _a+1
L0002:	lda     _a+1
	cmp     #$03
	bne     L0006
	lda     _a
	cmp     #$C0
L0006:	bcs     L0003
;
; vram_put(0x0);
;
	lda     #$00
	jsr     _vram_put
;
; for (a = 0; a < 960; ++a) {
;
	inc     _a
	bne     L0002
	inc     _a+1
	jmp     L0002
;
; for (i = 8; i < 20; i += 2) {
;
L0003:	lda     #$08
L0050:	sta     _i
	cmp     #$14
	bcs     L0009
;
; vram_adr(NTADR_A(8, i));
;
	ldx     #$00
	lda     _i
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ora     #$08
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _vram_adr
;
; vram_write(row_of_slots_upper, 14);
;
	lda     #<(_row_of_slots_upper)
	ldx     #>(_row_of_slots_upper)
	jsr     pushax
	ldx     #$00
	lda     #$0E
	jsr     _vram_write
;
; vram_adr(NTADR_A(8, i + 1));
;
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L000C
	inx
L000C:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ora     #$08
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	jsr     _vram_adr
;
; vram_write(row_of_slots_lower, 14);
;
	lda     #<(_row_of_slots_lower)
	ldx     #>(_row_of_slots_lower)
	jsr     pushax
	ldx     #$00
	lda     #$0E
	jsr     _vram_write
;
; for (i = 8; i < 20; i += 2) {
;
	lda     #$02
	clc
	adc     _i
	jmp     L0050
;
; vram_adr(NTADR_A(13, 22));
;
L0009:	ldx     #$22
	lda     #$CD
	jsr     _vram_adr
;
; vram_put(0xd);
;
	lda     #$0D
	jsr     _vram_put
;
; vram_put(0xe);
;
	lda     #$0E
	jsr     _vram_put
;
; vram_put(0xb);
;
	lda     #$0B
	jsr     _vram_put
;
; vram_put(0x8);
;
	lda     #$08
	jsr     _vram_put
;
; piece_pos = 3;
;
	lda     #$03
	sta     _piece_pos
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; ppu_wait_nmi();
;
L000D:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; set_scroll_x(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_x
;
; set_scroll_y(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_y
;
; pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
;
; pad_1 = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad_1
;
; pad_poll(1);
;
	lda     #$01
	jsr     _pad_poll
;
; pad_2 = get_pad_new(1);
;
	lda     #$01
	jsr     _get_pad_new
	sta     _pad_2
;
; if (piece_pos_offset_minus) {
;
	lda     _piece_pos_offset_minus
	beq     L0010
;
; --piece_pos_offset_minus;
;
	dec     _piece_pos_offset_minus
;
; if (piece_pos_offset_plus) {
;
L0010:	lda     _piece_pos_offset_plus
	beq     L0011
;
; --piece_pos_offset_plus;
;
	dec     _piece_pos_offset_plus
;
; if (!piece_pos_offset_minus && !piece_pos_offset_plus && computer_move_found) {
;
L0011:	lda     _piece_pos_offset_minus
	bne     L0012
	lda     _piece_pos_offset_plus
	bne     L0012
	lda     _computer_move_found
	beq     L0012
;
; j = find_board_pos(0);
;
	lda     #$00
	jsr     _find_board_pos
	sta     _j
;
; animate_piece_falling();
;
	jsr     _animate_piece_falling
;
; board[j] = 2;
;
	ldy     _j
	lda     #$02
	sta     _board,y
;
; draw_board_tile(j);
;
	lda     _j
	jsr     _draw_board_tile
;
; if (check_for_win(0, 2)) {
;
	lda     #$00
	jsr     pusha
	lda     #$02
	jsr     _check_for_win
	tax
	beq     L0054
;
; multi_vram_buffer_horz(computer_wins_text, 14, NTADR_A(8, 4));
;
	jsr     decsp3
	lda     #<(_computer_wins_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_computer_wins_text)
	sta     (sp),y
	lda     #$0E
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$88
	jsr     _multi_vram_buffer_horz
;
; wait_for_input();
;
	jsr     _wait_for_input
;
; --turn;
;
L0054:	dec     _turn
;
; piece_pos = 3;
;
	lda     #$03
	sta     _piece_pos
;
; --computer_move_found;
;
	dec     _computer_move_found
;
; if (!turn) {
;
L0012:	lda     _turn
	jne     L0018
;
; if (pad_1 & PAD_LEFT && piece_pos) {
;
	lda     _pad_1
	and     #$02
	beq     L0058
	lda     _piece_pos
	beq     L0058
;
; --piece_pos;
;
	dec     _piece_pos
;
; piece_pos_offset_plus += 16;
;
	lda     #$10
	clc
	adc     _piece_pos_offset_plus
	sta     _piece_pos_offset_plus
;
; if (pad_1 & PAD_RIGHT && piece_pos < 6) {
;
L0058:	lda     _pad_1
	and     #$01
	beq     L005C
	lda     _piece_pos
	cmp     #$06
	bcs     L005C
;
; ++piece_pos;
;
	inc     _piece_pos
;
; piece_pos_offset_minus += 16;
;
	lda     #$10
	clc
	adc     _piece_pos_offset_minus
	sta     _piece_pos_offset_minus
;
; if (pad_1 & PAD_DOWN && !piece_pos_offset_minus && !piece_pos_offset_plus) {
;
L005C:	lda     _pad_1
	and     #$04
	jeq     L003C
	lda     _piece_pos_offset_minus
	jne     L003C
	lda     _piece_pos_offset_plus
	jne     L003C
;
; j = find_board_pos(0);
;
	jsr     _find_board_pos
	sta     _j
;
; if (j != 255) {
;
	cmp     #$FF
	jeq     L003C
;
; animate_piece_falling();
;
	jsr     _animate_piece_falling
;
; board[j] = 1;
;
	ldy     _j
	lda     #$01
	sta     _board,y
;
; draw_board_tile(j);
;
	lda     _j
	jsr     _draw_board_tile
;
; if (check_for_win(0, 1)) {
;
	lda     #$00
	jsr     pusha
	lda     #$01
	jsr     _check_for_win
	tax
	beq     L0060
;
; multi_vram_buffer_horz(player_1_wins_text, 14, NTADR_A(8, 4));
;
	jsr     decsp3
	lda     #<(_player_1_wins_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_player_1_wins_text)
	sta     (sp),y
	lda     #$0E
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$88
	jsr     _multi_vram_buffer_horz
;
; wait_for_input();
;
	jsr     _wait_for_input
;
; ++turn;
;
L0060:	inc     _turn
;
; } else {
;
	jmp     L0072
;
; if (gamemode) {
;
L0018:	lda     _gamemode
	beq     L0062
;
; if (!computer_move_found) {
;
	lda     _computer_move_found
	jne     L003C
;
; piece_pos = get_computer_move();
;
	jsr     _get_computer_move
	sta     _piece_pos
;
; if (piece_pos > 3) {
;
	cmp     #$04
	bcc     L002B
;
; piece_pos_offset_minus = piece_animation_values[piece_pos];
;
	ldy     _piece_pos
	lda     _piece_animation_values,y
	sta     _piece_pos_offset_minus
;
; } else {
;
	jmp     L0061
;
; piece_pos_offset_plus = piece_animation_values[piece_pos];
;
L002B:	ldy     _piece_pos
	lda     _piece_animation_values,y
	sta     _piece_pos_offset_plus
;
; ++computer_move_found;
;
L0061:	inc     _computer_move_found
;
; } else {
;
	jmp     L003C
;
; if (pad_2 & PAD_LEFT && piece_pos) {
;
L0062:	lda     _pad_2
	and     #$02
	beq     L0066
	lda     _piece_pos
	beq     L0066
;
; --piece_pos;
;
	dec     _piece_pos
;
; piece_pos_offset_plus += 16;
;
	lda     #$10
	clc
	adc     _piece_pos_offset_plus
	sta     _piece_pos_offset_plus
;
; if (pad_2 & PAD_RIGHT && piece_pos < 6) {
;
L0066:	lda     _pad_2
	and     #$01
	beq     L006A
	lda     _piece_pos
	cmp     #$06
	bcs     L006A
;
; ++piece_pos;
;
	inc     _piece_pos
;
; piece_pos_offset_minus += 16;
;
	lda     #$10
	clc
	adc     _piece_pos_offset_minus
	sta     _piece_pos_offset_minus
;
; if (pad_2 & PAD_DOWN && !piece_pos_offset_minus && !piece_pos_offset_plus) {
;
L006A:	lda     _pad_2
	and     #$04
	beq     L003C
	lda     _piece_pos_offset_minus
	bne     L003C
	lda     _piece_pos_offset_plus
	bne     L003C
;
; j = find_board_pos(0);
;
	jsr     _find_board_pos
	sta     _j
;
; if (j != 255) {
;
	cmp     #$FF
	beq     L003C
;
; animate_piece_falling();
;
	jsr     _animate_piece_falling
;
; board[j] = 2;
;
	ldy     _j
	lda     #$02
	sta     _board,y
;
; draw_board_tile(j);
;
	lda     _j
	jsr     _draw_board_tile
;
; if (check_for_win(0, 2)) {
;
	lda     #$00
	jsr     pusha
	lda     #$02
	jsr     _check_for_win
	tax
	beq     L006E
;
; multi_vram_buffer_horz(player_2_wins_text, 14, NTADR_A(8, 4));
;
	jsr     decsp3
	lda     #<(_player_2_wins_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_player_2_wins_text)
	sta     (sp),y
	lda     #$0E
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$88
	jsr     _multi_vram_buffer_horz
;
; wait_for_input();
;
	jsr     _wait_for_input
;
; --turn;
;
L006E:	dec     _turn
;
; piece_pos = 3;
;
L0072:	lda     #$03
	sta     _piece_pos
;
; if (turn) {
;
L003C:	lda     _turn
	beq     L003F
;
; if (gamemode) {
;
	lda     _gamemode
	beq     L0040
;
; multi_vram_buffer_horz(computers_turn_text, 10, NTADR_A(10, 21));
;
	jsr     decsp3
	lda     #<(_computers_turn_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_computers_turn_text)
;
; } else {
;
	jmp     L0076
;
; multi_vram_buffer_horz(player_2s_turn_text, 10, NTADR_A(10, 21));
;
L0040:	jsr     decsp3
	lda     #<(_player_2s_turn_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_player_2s_turn_text)
;
; } else {
;
	jmp     L0076
;
; multi_vram_buffer_horz(player_1s_turn_text, 10, NTADR_A(10, 21));
;
L003F:	jsr     decsp3
	lda     #<(_player_1s_turn_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_player_1s_turn_text)
L0076:	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$AA
	jsr     _multi_vram_buffer_horz
;
; oam_spr(board_positions_x[piece_pos] + piece_pos_offset_plus - piece_pos_offset_minus, 44, 0x21, 0b00000000 + turn);
;
	jsr     decsp3
	ldy     _piece_pos
	lda     _board_positions_x,y
	clc
	adc     _piece_pos_offset_plus
	sec
	sbc     _piece_pos_offset_minus
	ldy     #$02
	sta     (sp),y
	lda     #$2C
	dey
	sta     (sp),y
	lda     #$21
	dey
	sta     (sp),y
	lda     _turn
	jsr     _oam_spr
;
; oam_spr(board_positions_x[piece_pos] + 8 + piece_pos_offset_plus - piece_pos_offset_minus, 44, 0x22, 0b01000000 + turn);
;
	jsr     decsp3
	ldy     _piece_pos
	lda     _board_positions_x,y
	clc
	adc     #$08
	bcc     L0052
	clc
L0052:	adc     _piece_pos_offset_plus
	sec
	sbc     _piece_pos_offset_minus
	ldy     #$02
	sta     (sp),y
	lda     #$2C
	dey
	sta     (sp),y
	lda     #$22
	dey
	sta     (sp),y
	lda     _turn
	clc
	adc     #$40
	jsr     _oam_spr
;
; oam_spr(board_positions_x[piece_pos] + piece_pos_offset_plus - piece_pos_offset_minus, 52, 0x22, 0b10000000 + turn);
;
	jsr     decsp3
	ldy     _piece_pos
	lda     _board_positions_x,y
	clc
	adc     _piece_pos_offset_plus
	sec
	sbc     _piece_pos_offset_minus
	ldy     #$02
	sta     (sp),y
	lda     #$34
	dey
	sta     (sp),y
	lda     #$22
	dey
	sta     (sp),y
	lda     _turn
	clc
	adc     #$80
	jsr     _oam_spr
;
; oam_spr(board_positions_x[piece_pos] + 8 + piece_pos_offset_plus - piece_pos_offset_minus, 52, 0x22, 0b11000000 + turn);
;
	jsr     decsp3
	ldy     _piece_pos
	lda     _board_positions_x,y
	clc
	adc     #$08
	bcc     L0053
	clc
L0053:	adc     _piece_pos_offset_plus
	sec
	sbc     _piece_pos_offset_minus
	ldy     #$02
	sta     (sp),y
	lda     #$34
	dey
	sta     (sp),y
	lda     #$22
	dey
	sta     (sp),y
	lda     _turn
	clc
	adc     #$C0
	jsr     _oam_spr
;
; while (1) {
;
	jmp     L000D

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(title_pal);
;
	lda     #<(_title_pal)
	ldx     #>(_title_pal)
	jsr     _pal_bg
;
; pal_spr(title_pal);
;
	lda     #<(_title_pal)
	ldx     #>(_title_pal)
	jsr     _pal_spr
;
; vram_adr(NTADR_A(7, 18));
;
	ldx     #$22
	lda     #$47
	jsr     _vram_adr
;
; vram_write(player_vs_player_text, 17);
;
	lda     #<(_player_vs_player_text)
	ldx     #>(_player_vs_player_text)
	jsr     pushax
	ldx     #$00
	lda     #$11
	jsr     _vram_write
;
; vram_adr(NTADR_A(6, 20));
;
	ldx     #$22
	lda     #$86
	jsr     _vram_adr
;
; vram_write(player_vs_computer_text, 19);
;
	lda     #<(_player_vs_computer_text)
	ldx     #>(_player_vs_computer_text)
	jsr     pushax
	ldx     #$00
	lda     #$13
	jsr     _vram_write
;
; selected_option = 143;
;
	lda     #$8F
	sta     _selected_option
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_spr(32, selected_option, 0x20, 0b00000001);
;
	jsr     decsp3
	lda     #$20
	ldy     #$02
	sta     (sp),y
	lda     _selected_option
	dey
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(207, selected_option, 0x20, 0b01000001);
;
	jsr     decsp3
	lda     #$CF
	ldy     #$02
	sta     (sp),y
	lda     _selected_option
	dey
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #$41
	jsr     _oam_spr
;
; set_scroll_x(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_x
;
; set_scroll_y(0);
;
	ldx     #$00
	txa
	jsr     _set_scroll_y
;
; pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
;
; pad_1 = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad_1
;
; if (pad_1 & PAD_SELECT) {
;
	and     #$20
	beq     L000C
;
; if (selected_option == 143) {
;
	lda     _selected_option
	cmp     #$8F
	bne     L000B
;
; selected_option = 159;
;
	lda     #$9F
;
; } else {
;
	jmp     L000A
;
; selected_option = 143;
;
L000B:	lda     #$8F
L000A:	sta     _selected_option
;
; if (pad_1 & PAD_START) {
;
L000C:	lda     _pad_1
	and     #$10
	beq     L0002
;
; seed_rng();
;
	jsr     _seed_rng
;
; if (selected_option == 159) {
;
	lda     _selected_option
	cmp     #$9F
	bne     L0009
;
; ++gamemode;
;
	inc     _gamemode
;
; game();
;
L0009:	jsr     _game
;
; while (1) {
;
	jmp     L0002

.endproc

